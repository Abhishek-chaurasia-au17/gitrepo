For all users:

the first time you install git bash[windows]/ terminal [linux/macOS], you need to run 3 commands

git config --global user.name "github_username/Full Name"
git config --global user.email "github_email"
git config --list [only to verify if the first 2 command ran successfully]

what git is ? why we need it? we learned a few basic commands on git.

git init - make a new git repo/project
git add . - allows git to tracking/staging/adding all the files in a repo
git rm --cache <file_name> - remove a file and make it untracked

git rm --cache -r <folder_name> - remove a folder from git and make untracked

rm -r -f .git : uninitialized a github repository

git diff: [there is a difference between last version and current (content)]

git log: full history of all the commits/versions

git status: returns the current state of the repository, pervious version/commit, unstaged file names, staged file name

git commit -m "Message": create a version with whatever message we provide as version title

GitHub: github is a version/flavor of git made available over the internet with GUI functionality. 

On the internet in their own server [very very very big computer] they create a common project/repo for your whole team in your name.

Now your whole team can take this project locally [downloading on your own computer] and work on their own tasks. once we have made our changes, make them into versions, we can upload them back to github. 

What if we are working on a supersecret project. That we do not want the general public to be able to see it.

We have the option of public[open source: linux, android, vscode] and private projects in Github

Licenses: are not a major thing to know about as a developer

If I want to create a copy of this project on my personal computer, I will basically just [clone] it.

git clone <https://github.com/priyesh-attainu/kalam-core-cse-resources> : make a copy of the github project on your computer. / clone is just like downloading the entire project in your local computer.

Local:
Initial Commit -> Update Readme -> Create README -> Create git-bash -> Create Assignment-Week01 [Head]

Remote: 
Initial Commit -> Update Readme -> Create README -> Create git-bash [Head]


git diff HEAD

git push : it takes your local version of the repo and overwrites the remote version of the repo


Basic Workflow:

git clone 
make changes 
git add [in your local repo, it will track new changes]
git commit 
git push [once you have made 1 or more commits, it will push all these commits to remote/internet version of the repo] 

We made some changes in our offline, right and we pushed it to remote. 

We are working in a team. What if somebody else makes changes on the remote, will it be directly updated on your local? 

no, you have to do it manually. 

git pull: pull all new changes from remote to local

you have 6 on the remote and 5 on the local.


why can we not just delete this old repo [out of sync] and make a new repo. 

Scenario 1: 
600MB repo, to clone and setup. and I changed one file, 10KB.

Scenario 2: local is behind remote, delete my local and clone remote again. 

Remote :
commit1 -> commit2 -> commit3 -> commit4 -> commit5 -> commit6 -> commit 7 -> [commit 8 -> commit 9](git push)

commit1 -> commit2 -> commit3 -> commit4 -> commit5 -> commit6 -> commit 8 -> Commit 7 [git pull] -> commit 9 [Merge Commit, Whenever there are major differences in your local and remote, git creates a new merge commit to order things correctly]
Local:

Merge Conflict:
[Let us say we are making a rip-off of google docs, by default all of them have the same margin, echo "Default margin value is 8px", in the same file, margin_values]

team mate: 
echo "Default margin value is 12px"

you:
echo "Default margin value is 6px"

confusion: to keep your change or your team mates, or both

person who is trying to push second, will get the merge conflict. 

[You need to be faster than your team mates, or waste time resolving merge conflicts]

Team Mates:(Junior Developer)
commit1 -> commit2 -> commit3 -> commit4 -> commit5 -> commit6 -> commit 7 [echo "Default margin value is 12px"]

You:(Senior Manager)
commit1 -> commit2 -> commit3 -> commit4 -> commit5 -> commit6 -> commit 8 [echo "Default margin value is 6px"] -> commit 7[pull] [echo "Default margin value is 12px"] -> Commit 9[merge commit/conflict resolution] (echo "Default margin value is 6px", echo "Default margin value is 12px") -> push


you as a manager can force github to overwrite your junior ka changes,
Remote:
commit1 -> commit2 -> commit3 -> commit4 -> commit5 -> commit6 -> commit 8

we create a new project on the local (git init)
Make changes like say 100 lines 
Track these changes
Commit these changes

[How to make an existing repo available on github]

upstream[remote priyesh-attainu/robin only I can edit this]
origin [remote sravan/robin][only sravan can edit this]
local machine [folder called robin]

just because something is public does not mean you can push to it?
so to work on the same public project, you create a fork. 

origin [remote priyesh-attainu/robin only I can edit this]
local machine [folder called robin]

First time you are pushing:
1. add a remote: git remote add origin <url of the github repo>
2. git push -u origin master
